version: '3.8'

services:
  # Network Automation MCP Server
  network-automation:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: network-automation-mcp
    restart: unless-stopped
    ports:
      - "8000:8000"   # Prometheus metrics
      - "8080:8080"   # Health check endpoint
      - "8443:8443"   # MCP server (if exposed via HTTP)
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=8000
      - HEALTH_CHECK_PORT=8080
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8443
    networks:
      - network-automation
    depends_on:
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: network-automation-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - network-automation

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: network-automation-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - network-automation
    depends_on:
      - prometheus

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: network-automation-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass netauto123
    networks:
      - network-automation

  # SQLite backup service (for production, use PostgreSQL)
  backup:
    image: alpine:latest
    container_name: network-automation-backup
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./backups:/app/backups
    command: >
      sh -c "
        while true; do
          echo 'Creating backup at $(date)'
          mkdir -p /app/backups/$(date +%Y%m%d)
          cp -r /app/data/* /app/backups/$(date +%Y%m%d)/ 2>/dev/null || true
          find /app/backups -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
          sleep 86400
        done
      "
    networks:
      - network-automation

networks:
  network-automation:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
  grafana-data:
  redis-data:
